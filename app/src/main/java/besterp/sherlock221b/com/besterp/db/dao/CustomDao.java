package besterp.sherlock221b.com.besterp.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import besterp.sherlock221b.com.besterp.db.model.Custom;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOM".
*/
public class CustomDao extends AbstractDao<Custom, Long> {

    public static final String TABLENAME = "CUSTOM";

    /**
     * Properties of entity Custom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CustomName = new Property(1, String.class, "customName", false, "CUSTOM_NAME");
        public final static Property CustomAddress = new Property(2, String.class, "customAddress", false, "CUSTOM_ADDRESS");
        public final static Property CustomConcat = new Property(3, String.class, "customConcat", false, "CUSTOM_CONCAT");
        public final static Property CustomIcon = new Property(4, String.class, "customIcon", false, "CUSTOM_ICON");
        public final static Property CustomType = new Property(5, int.class, "customType", false, "CUSTOM_TYPE");
        public final static Property IsDelete = new Property(6, boolean.class, "isDelete", false, "IS_DELETE");
        public final static Property CrtTime = new Property(7, java.util.Date.class, "crtTime", false, "CRT_TIME");
        public final static Property UpdateTime = new Property(8, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
    };


    public CustomDao(DaoConfig config) {
        super(config);
    }
    
    public CustomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CUSTOM_NAME\" TEXT NOT NULL ," + // 1: customName
                "\"CUSTOM_ADDRESS\" TEXT," + // 2: customAddress
                "\"CUSTOM_CONCAT\" TEXT," + // 3: customConcat
                "\"CUSTOM_ICON\" TEXT," + // 4: customIcon
                "\"CUSTOM_TYPE\" INTEGER NOT NULL ," + // 5: customType
                "\"IS_DELETE\" INTEGER NOT NULL ," + // 6: isDelete
                "\"CRT_TIME\" INTEGER NOT NULL ," + // 7: crtTime
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 8: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Custom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCustomName());
 
        String customAddress = entity.getCustomAddress();
        if (customAddress != null) {
            stmt.bindString(3, customAddress);
        }
 
        String customConcat = entity.getCustomConcat();
        if (customConcat != null) {
            stmt.bindString(4, customConcat);
        }
 
        String customIcon = entity.getCustomIcon();
        if (customIcon != null) {
            stmt.bindString(5, customIcon);
        }
        stmt.bindLong(6, entity.getCustomType());
        stmt.bindLong(7, entity.getIsDelete() ? 1L: 0L);
        stmt.bindLong(8, entity.getCrtTime().getTime());
        stmt.bindLong(9, entity.getUpdateTime().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Custom readEntity(Cursor cursor, int offset) {
        Custom entity = new Custom( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // customName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customConcat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // customIcon
            cursor.getInt(offset + 5), // customType
            cursor.getShort(offset + 6) != 0, // isDelete
            new java.util.Date(cursor.getLong(offset + 7)), // crtTime
            new java.util.Date(cursor.getLong(offset + 8)) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Custom entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomName(cursor.getString(offset + 1));
        entity.setCustomAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomConcat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCustomType(cursor.getInt(offset + 5));
        entity.setIsDelete(cursor.getShort(offset + 6) != 0);
        entity.setCrtTime(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUpdateTime(new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Custom entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Custom entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
