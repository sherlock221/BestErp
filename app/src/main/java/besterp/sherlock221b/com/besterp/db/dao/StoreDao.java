package besterp.sherlock221b.com.besterp.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import besterp.sherlock221b.com.besterp.db.model.Product;
import besterp.sherlock221b.com.besterp.db.model.ProductStandard;

import besterp.sherlock221b.com.besterp.db.model.Store;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE".
*/
public class StoreDao extends AbstractDao<Store, Long> {

    public static final String TABLENAME = "STORE";

    /**
     * Properties of entity Store.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoreNumber = new Property(1, int.class, "storeNumber", false, "STORE_NUMBER");
        public final static Property IsDelete = new Property(2, boolean.class, "isDelete", false, "IS_DELETE");
        public final static Property CrtTime = new Property(3, java.util.Date.class, "crtTime", false, "CRT_TIME");
        public final static Property UpdateTime = new Property(4, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property ProductId = new Property(5, Long.class, "productId", false, "PRODUCT_ID");
        public final static Property StandardId = new Property(6, Long.class, "standardId", false, "STANDARD_ID");
    };

    private DaoSession daoSession;


    public StoreDao(DaoConfig config) {
        super(config);
    }
    
    public StoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STORE_NUMBER\" INTEGER NOT NULL ," + // 1: storeNumber
                "\"IS_DELETE\" INTEGER NOT NULL ," + // 2: isDelete
                "\"CRT_TIME\" INTEGER NOT NULL ," + // 3: crtTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 4: updateTime
                "\"PRODUCT_ID\" INTEGER," + // 5: productId
                "\"STANDARD_ID\" INTEGER);"); // 6: standardId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Store entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStoreNumber());
        stmt.bindLong(3, entity.getIsDelete() ? 1L: 0L);
        stmt.bindLong(4, entity.getCrtTime().getTime());
        stmt.bindLong(5, entity.getUpdateTime().getTime());
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(6, productId);
        }
 
        Long standardId = entity.getStandardId();
        if (standardId != null) {
            stmt.bindLong(7, standardId);
        }
    }

    @Override
    protected void attachEntity(Store entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Store readEntity(Cursor cursor, int offset) {
        Store entity = new Store( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // storeNumber
            cursor.getShort(offset + 2) != 0, // isDelete
            new java.util.Date(cursor.getLong(offset + 3)), // crtTime
            new java.util.Date(cursor.getLong(offset + 4)), // updateTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // productId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // standardId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Store entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoreNumber(cursor.getInt(offset + 1));
        entity.setIsDelete(cursor.getShort(offset + 2) != 0);
        entity.setCrtTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdateTime(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setProductId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStandardId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Store entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Store entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductStandardDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM STORE T");
            builder.append(" LEFT JOIN PRODUCT_STANDARD T0 ON T.\"STANDARD_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN PRODUCT T1 ON T.\"PRODUCT_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Store loadCurrentDeep(Cursor cursor, boolean lock) {
        Store entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ProductStandard productStandard = loadCurrentOther(daoSession.getProductStandardDao(), cursor, offset);
        entity.setProductStandard(productStandard);
        offset += daoSession.getProductStandardDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProduct(product);

        return entity;    
    }

    public Store loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Store> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Store> list = new ArrayList<Store>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Store> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Store> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
