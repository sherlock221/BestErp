package besterp.sherlock221b.com.besterp.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import besterp.sherlock221b.com.besterp.db.model.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductName = new Property(1, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductDesc = new Property(2, String.class, "productDesc", false, "PRODUCT_DESC");
        public final static Property ProductUnit = new Property(3, String.class, "productUnit", false, "PRODUCT_UNIT");
        public final static Property ProductUseCount = new Property(4, Integer.class, "productUseCount", false, "PRODUCT_USE_COUNT");
        public final static Property ProductPurchaseUseCount = new Property(5, Integer.class, "productPurchaseUseCount", false, "PRODUCT_PURCHASE_USE_COUNT");
        public final static Property ProductSaleUseCount = new Property(6, Integer.class, "productSaleUseCount", false, "PRODUCT_SALE_USE_COUNT");
        public final static Property IsDelete = new Property(7, boolean.class, "isDelete", false, "IS_DELETE");
        public final static Property CrtTime = new Property(8, java.util.Date.class, "crtTime", false, "CRT_TIME");
        public final static Property UpdateTime = new Property(9, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
    };

    private DaoSession daoSession;


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRODUCT_NAME\" TEXT NOT NULL ," + // 1: productName
                "\"PRODUCT_DESC\" TEXT," + // 2: productDesc
                "\"PRODUCT_UNIT\" TEXT," + // 3: productUnit
                "\"PRODUCT_USE_COUNT\" INTEGER," + // 4: productUseCount
                "\"PRODUCT_PURCHASE_USE_COUNT\" INTEGER," + // 5: productPurchaseUseCount
                "\"PRODUCT_SALE_USE_COUNT\" INTEGER," + // 6: productSaleUseCount
                "\"IS_DELETE\" INTEGER NOT NULL ," + // 7: isDelete
                "\"CRT_TIME\" INTEGER NOT NULL ," + // 8: crtTime
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 9: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getProductName());
 
        String productDesc = entity.getProductDesc();
        if (productDesc != null) {
            stmt.bindString(3, productDesc);
        }
 
        String productUnit = entity.getProductUnit();
        if (productUnit != null) {
            stmt.bindString(4, productUnit);
        }
 
        Integer productUseCount = entity.getProductUseCount();
        if (productUseCount != null) {
            stmt.bindLong(5, productUseCount);
        }
 
        Integer productPurchaseUseCount = entity.getProductPurchaseUseCount();
        if (productPurchaseUseCount != null) {
            stmt.bindLong(6, productPurchaseUseCount);
        }
 
        Integer productSaleUseCount = entity.getProductSaleUseCount();
        if (productSaleUseCount != null) {
            stmt.bindLong(7, productSaleUseCount);
        }
        stmt.bindLong(8, entity.getIsDelete() ? 1L: 0L);
        stmt.bindLong(9, entity.getCrtTime().getTime());
        stmt.bindLong(10, entity.getUpdateTime().getTime());
    }

    @Override
    protected void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // productName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // productDesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productUnit
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // productUseCount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // productPurchaseUseCount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // productSaleUseCount
            cursor.getShort(offset + 7) != 0, // isDelete
            new java.util.Date(cursor.getLong(offset + 8)), // crtTime
            new java.util.Date(cursor.getLong(offset + 9)) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductName(cursor.getString(offset + 1));
        entity.setProductDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductUnit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductUseCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setProductPurchaseUseCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setProductSaleUseCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsDelete(cursor.getShort(offset + 7) != 0);
        entity.setCrtTime(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdateTime(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
